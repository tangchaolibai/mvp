/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.hsb.mvpmsweb.api;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.data.domain.Pageable;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.github.xiaoymin.knife4j.annotations.ApiOperationSupport;
import com.hsb.mvpmsweb.api.annotation.JwtIgnore;
import com.hsb.mvpmsweb.api.annotation.NeedToken;
import com.hsb.mvpmsweb.api.annotation.NeedTokenAndPageable;
import com.hsb.mvpmsweb.api.annotation.ResponseConfig;
import com.hsb.mvpmsweb.api.exception.MvpShareException;
import com.hsb.mvpmsweb.constant.HttpStatusCodeConstants;
import com.hsb.mvpmsweb.constant.Swagger2Constants;
import com.hsb.mvpmsweb.model.payload.request.AddFriendRequest;
import com.hsb.mvpmsweb.model.payload.request.AllFanListRequest;
import com.hsb.mvpmsweb.model.payload.request.CommentRequest;
import com.hsb.mvpmsweb.model.payload.request.FollowingListByCreateTimeRequest;
import com.hsb.mvpmsweb.model.payload.request.FollowingUserByUserNameRequest;
import com.hsb.mvpmsweb.model.payload.request.FollowingUserListRequest;
import com.hsb.mvpmsweb.model.payload.request.FriendByMobileContactsRequest;
import com.hsb.mvpmsweb.model.payload.request.GiveFollowRequest;
import com.hsb.mvpmsweb.model.payload.request.InviteFriendByMobileContactsRequest;
import com.hsb.mvpmsweb.model.payload.request.RecentlyUpdatedUserRequest;
import com.hsb.mvpmsweb.model.payload.request.ReplyRequest;
import com.hsb.mvpmsweb.model.payload.request.ShareListRequest;
import com.hsb.mvpmsweb.model.payload.request.ShareRelationCountRequest;
import com.hsb.mvpmsweb.model.payload.request.SocialLikeRequest;
import com.hsb.mvpmsweb.model.payload.request.SocialMsgRequest;
import com.hsb.mvpmsweb.model.payload.request.SocialShareRequest;
import com.hsb.mvpmsweb.model.payload.response.AllFanListResponse;
import com.hsb.mvpmsweb.model.payload.response.AllFollowingUserListResponse;
import com.hsb.mvpmsweb.model.payload.response.CommentListResponse;
import com.hsb.mvpmsweb.model.payload.response.CommentResponse;
import com.hsb.mvpmsweb.model.payload.response.DeleteCommentResponse;
import com.hsb.mvpmsweb.model.payload.response.DraftListResponse;
import com.hsb.mvpmsweb.model.payload.response.FilesPathListResponse;
import com.hsb.mvpmsweb.model.payload.response.FollowingListResponse;
import com.hsb.mvpmsweb.model.payload.response.FollowingUserByUserNameResponse;
import com.hsb.mvpmsweb.model.payload.response.FriendByMobileContactsResponse;
import com.hsb.mvpmsweb.model.payload.response.FriendListResponse;
import com.hsb.mvpmsweb.model.payload.response.FriendResponse;
import com.hsb.mvpmsweb.model.payload.response.GiveFollowResponse;
import com.hsb.mvpmsweb.model.payload.response.InviteFriendByMobileContactsResponse;
import com.hsb.mvpmsweb.model.payload.response.IsFriendResponse;
import com.hsb.mvpmsweb.model.payload.response.PostContentResponse;
import com.hsb.mvpmsweb.model.payload.response.ProfileResponse;
import com.hsb.mvpmsweb.model.payload.response.RecentlyUpdatedUserResponse;
import com.hsb.mvpmsweb.model.payload.response.ReplyListResponse;
import com.hsb.mvpmsweb.model.payload.response.ReplyResponse;
import com.hsb.mvpmsweb.model.payload.response.ShareListResponse;
import com.hsb.mvpmsweb.model.payload.response.ShareRelationCountResponse;
import com.hsb.mvpmsweb.model.payload.response.ShareResponse;
import com.hsb.mvpmsweb.model.payload.response.SuccessResponse;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import springfox.documentation.annotations.ApiIgnore;

@Api(tags = Swagger2Constants.TAG_NM_SHARE, description = Swagger2Constants.TAG_DESC_SHARE)
public interface MvpShareModuleApi {

	@ApiOperation(value = "Upload Photos and Video", nickname = "uploadFiles", notes = "Upload Photos and Video", tags= "MVP SHARE Module" ,response = FilesPathListResponse.class)
    @ApiOperationSupport(order = 1)
	@NeedToken
	@ResponseConfig(@ApiResponse(code = 200, message = "OK", response = FilesPathListResponse.class))
	@PostMapping(value = "/share/uploadFiles", produces = MediaType.APPLICATION_JSON_VALUE)
	ResponseEntity<FilesPathListResponse> uploadFiles( @ApiParam(value = "The userId of User", required = true) @Valid @RequestParam(value = "userId", required = true) Integer userId,@ApiParam(value = "files" ,required=false )  @Valid @RequestBody MultipartFile[] multipartFiles) throws MvpShareException ;
	
	
    @ApiOperation(value = "Delete Content", nickname = "deleteContent", notes = "Delete Content", tags= "MVP SHARE Module",response = SuccessResponse.class)
    @ApiOperationSupport(order = 4)
    @NeedToken
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = SuccessResponse.class))
    @DeleteMapping(value = "/share/deleteContent",produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<SuccessResponse> deleteContent(@ApiParam(value = "The shareId of content", required = true) @Valid @RequestParam(value = "shareId", required = true) Integer shareId);


    @ApiOperation(value = "Get Draft Content", nickname = "getDraftContent", notes = "Get Draft Content", response = DraftListResponse.class, tags= "MVP SHARE Module")
    @ApiOperationSupport(order = 7)
    @NeedToken
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = DraftListResponse.class))
    @GetMapping(value = "/share/getDraftContent", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<DraftListResponse> getDraftContent( @ApiParam(value = "The userId of User", required = true) @Valid @RequestParam(value = "userId", required = true) Integer userId);
    
    
    @ApiOperation(value = "Share Content to Internal Friends", nickname = "shareContent", notes = "Share Content to Internal Friends", tags= "MVP SHARE Module", response = SuccessResponse.class)
    @ApiOperationSupport(order = 10)
    @NeedToken
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = SuccessResponse.class))
    @PostMapping(value = "/share/shareContent", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<SuccessResponse> shareContent(@ApiParam(value = "massage notification" ,required=true )  @Valid @RequestBody SocialMsgRequest socialMsg) throws MvpShareException;
    
    
    @ApiOperation(value = "Post Content", nickname = "postContent", notes = "Post Content", tags = "MVP SHARE Module", response = PostContentResponse.class)
    @ApiOperationSupport(order = 13)
    @NeedToken
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = PostContentResponse.class))
    @PostMapping(value = "/share/postContent", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<PostContentResponse> postContent(@ApiParam(value = "SocialShare Request", required = true) @Valid @RequestBody SocialShareRequest socialShare) throws MvpShareException;
    
//    @ApiOperation(value = "Post Content with Product", nickname = "postContentWithProduct", notes = "Post Content with Product", tags= "MVP SHARE Module" , response = BaseResponse.class)
//    @ApiOperationSupport(order = 14)
//    @NeedToken
//    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = BaseResponse.class))
//    @PostMapping(value = "/share/postContentWithProduct", produces = MediaType.APPLICATION_JSON_VALUE)
//    ResponseEntity<BaseResponse> postContentWithProduct(@ApiParam(value = "SocialShare Request" ,required=true )  @Valid @RequestBody ShareWithProductRequest shareWithProductRequest) throws MvpTicketException ;
    
    @ApiOperation(value = "Like Content or cancle Content", nickname = "giveLike", notes = "Like Content or cancle Content", tags= "MVP SHARE Module", response = SuccessResponse.class)
    @ApiOperationSupport(order = 16)
    @NeedToken
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = SuccessResponse.class))
    @PostMapping(value = "/share/giveLike", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<SuccessResponse> giveLike(@ApiParam(value = "like of somebody's content" ,required=true )  @Valid @RequestBody SocialLikeRequest socialLike)  throws MvpShareException;
    
    
    @ApiOperation(value = "Get Following List By CreateTime", nickname = "getFollowingListByCreateTime", notes = "Get Following List By CreateTime", response = FollowingListResponse.class, tags= "MVP SHARE Module")
    @ApiOperationSupport(order = 19)
    @NeedTokenAndPageable
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = FollowingListResponse.class))
    @PostMapping(value = "/share/getFollowingListByCreateTime", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<FollowingListResponse> getFollowingListByCreateTime(@ApiParam(value = "Following List By CreateTime Request" ,required=true)  @Valid @RequestBody FollowingListByCreateTimeRequest followingListByCreateTimeRequest,@ApiIgnore Pageable pageable) throws MvpShareException;


    @ApiOperation(value = "Get Share List By CreateTime", nickname = "getShareListByCreateTime", notes = "Get Share List By CreateTime", response = ShareListResponse.class, tags= "MVP SHARE Module")
    @ApiOperationSupport(order = 21)
    @NeedTokenAndPageable
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = ShareListResponse.class))
    @PostMapping(value = "/share/getShareListByCreateTime", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<ShareListResponse> getShareListByCreateTime(@ApiParam(value = "Share List Request", required = true)@Valid @RequestBody ShareListRequest shareListRequest,@ApiIgnore Pageable pageable) throws MvpShareException;

    
    @ApiOperationSupport(order = 22, author = "mojianheng@formssi.com")
    @ApiOperation(value = "Get Share By Id", nickname = "getShareById", notes = "Get Share By Id", response = ShareResponse.class)
    @NeedToken
    @ResponseConfig(@ApiResponse(code = 200, message = HttpStatusCodeConstants.MSG_200, response = ShareResponse.class))
    @GetMapping(value = "/share", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<ShareResponse> getShareById(@ApiIgnore @RequestHeader("Authorization") String token, @Valid @RequestParam(value = "shareId", required = true) Integer shareId) throws MvpShareException;
    

    @ApiOperation(value = "Get Share Relation Count", nickname = "getShareRelationCount", notes = "Get Share Relation Count", response = ShareRelationCountResponse.class, tags= "MVP SHARE Module")
    @ApiOperationSupport(order = 24)
    @NeedToken
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = ShareRelationCountResponse.class))
    @PostMapping(value = "/share/getShareRelationCount", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<ShareRelationCountResponse> getShareRelationCount(@ApiParam(value = "Share RelationCount Request" ,required=true )  @Valid @RequestBody ShareRelationCountRequest shareRelationCountRequest);

    
    @ApiOperation(value = "Give Follow Other User", nickname = "giveFollow", notes = "give Follow Other User", tags={ "MVP SHARE Module", })
    @ApiOperationSupport(order = 30)
    @NeedToken
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = GiveFollowResponse.class))
    @PostMapping(value = "/share/giveFollow", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<GiveFollowResponse> giveFollow(@ApiParam(value = "Give Follow Request" ,required=true )  @Valid @RequestBody GiveFollowRequest GiveFollowRequest) throws MvpShareException;

    
    @ApiOperation(value = "Find Following User By UserName", nickname = "findFollowingByUserName", notes = "Find Following User By UserName", response = FollowingUserByUserNameResponse.class, tags={ "MVP SHARE Module", })
    @ApiOperationSupport(order = 33)
    @NeedToken
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = FollowingUserByUserNameResponse.class))
    @PostMapping(value = "/share/findFollowingBySearchContent", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<FollowingUserByUserNameResponse> findFollowingBySearchContent(@ApiParam(value = "Find Following By UserName Request" ,required=true )  @Valid @RequestBody FollowingUserByUserNameRequest followingUserByUserNameRequest) throws MvpShareException;

    
    @ApiOperation(value = "Get All Fan List", nickname = "getAllFanList", notes = "Get All Fan List", response = AllFanListResponse.class, tags={ "MVP SHARE Module", })
    @ApiOperationSupport(order = 36)
    @NeedToken
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = AllFanListResponse.class))
    @PostMapping(value = "/share/getAllFanList", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<AllFanListResponse> getAllFanList(@ApiParam(value = "All Fan List Request" ,required=true )  @Valid @RequestBody AllFanListRequest allFanListRequest) throws MvpShareException;
    
    
    @ApiOperation(value = "Get All Following User List", nickname = "getAllFollowingUserList", notes = "Get All Following User List", response = AllFollowingUserListResponse.class, tags={ "MVP SHARE Module", })
    @ApiOperationSupport(order = 39)
    @NeedToken
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = AllFollowingUserListResponse.class))
    @PostMapping(value = "/share/getAllFollowingUserList", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<AllFollowingUserListResponse> getAllFollowingUserList(@ApiParam(value = "All Following User List" ,required=true )  @Valid @RequestBody FollowingUserListRequest followingUserListRequest) throws MvpShareException;
     
    
    @ApiOperation(value = "Get Recently Updated User", nickname = "getRecentlyUpdatedUser", notes = "Get Recently Updated User", response = RecentlyUpdatedUserResponse.class, tags={ "MVP SHARE Module", })
    @ApiOperationSupport(order = 32)
    @NeedToken
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = RecentlyUpdatedUserResponse.class))
    @PostMapping(value = "/share/getRecentlyUpdatedUser", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<RecentlyUpdatedUserResponse> getRecentlyUpdatedUser(@ApiParam(value = "Recently Updated User" ,required=true )  @Valid @RequestBody RecentlyUpdatedUserRequest recentlyUpdatedUserRequest) throws MvpShareException;
    
    
    @JwtIgnore
    @ApiOperation(value = "", nickname = "", notes = "r", tags={ "MVP SHARE Module", })
    @ApiOperationSupport(order = 35)
    @ResponseConfig(@ApiResponse(code = 200, message = "OK"))
    @GetMapping(value = "/share/insertData", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<Void> insertData();
    
    @ApiOperationSupport(order = 42)
    @ApiOperation(value = "get comment list", nickname = "getCommentList", notes = "get COMMENT list", response = CommentListResponse.class)
    @NeedToken
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = CommentListResponse.class))
    @GetMapping(value = "/share/commentList", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<CommentListResponse> getCommentList(@NotNull @Valid @RequestParam("shareId")Integer shareId) throws MvpShareException;
    
    @ApiOperationSupport(order = 43)
    @ApiOperation(value = "get reply list", nickname = "getReplyList", notes = "get Reply list", response = ReplyListResponse.class)
    @NeedToken
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = ReplyListResponse.class))
    @GetMapping(value = "/share/replyList", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<ReplyListResponse> getReplyList(@NotNull @Valid @RequestParam("commentId")Integer commentId) throws MvpShareException;
    
    @ApiOperation(value = "Get Post List", nickname = "getPostList", notes = "getPostList", response = ProfileResponse.class, tags={ "MVP SHARE Module", })
    @ApiOperationSupport(order = 45)
    @NeedToken
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = ProfileResponse.class))
    @GetMapping(value = "/share/getPostList", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<ProfileResponse> getPostList(@ApiParam(value = "current user Id" ,required=true )  @Valid @RequestParam Integer currentUserId,@ApiParam(value = "Scan User Id" ,required=true )  @Valid @RequestParam Integer scanUserId) throws MvpShareException;
    
    
    @ApiOperation(value = "Get Like List", nickname = "getLikeList", notes = "getLikeList", response = ProfileResponse.class, tags= "MVP SHARE Module")
    @ApiOperationSupport(order = 48)
    @NeedToken
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = ProfileResponse.class))
    @GetMapping(value = "/share/getLikeList", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<ProfileResponse> getLikeList(@ApiParam(value = "current user Id" ,required=true )  @Valid @RequestParam Integer currentUserId,@ApiParam(value = "Scan User Id" ,required=true )  @Valid @RequestParam Integer scanUserId) throws MvpShareException;
    
    
    @ApiOperation(value = "Add Comment", nickname = "addComment", notes = "Add Comment", response = CommentResponse.class, tags= "MVP SHARE Module")
    @ApiOperationSupport(order = 51)
    @NeedToken
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = CommentResponse.class))
    @PostMapping(value = "/share/addComment", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<CommentResponse> addComment(@ApiParam(value = "Comment Request" ,required=true )  @Valid @RequestBody CommentRequest commentRequest) throws MvpShareException;
    
    
    @ApiOperation(value = "Add Reply", nickname = "addReply", notes = "Add Reply", response = ReplyResponse.class, tags= "MVP SHARE Module")
    @ApiOperationSupport(order = 54)
    @NeedToken
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = ReplyResponse.class))
    @PostMapping(value = "/share/addReply", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<ReplyResponse> addReply(@ApiParam(value = "Reply Request" ,required=true )  @Valid @RequestBody ReplyRequest replyRequest) throws MvpShareException;

    
    @ApiOperation(value = "Delete Commemt", nickname = "deleteCommentList", notes = "Delete Commemt", response = DeleteCommentResponse.class, tags= "MVP SHARE Module")
    @ApiOperationSupport(order = 57)
    @NeedToken
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = DeleteCommentResponse.class))
    @PostMapping(value = "/share/deleteComment", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<DeleteCommentResponse> deleteCommentList(@NotNull @ApiParam(value = "Share Id", required = true) @Valid @RequestParam(value = "shareId", required = true) Integer shareId,@NotNull @ApiParam(value = "Comment Entity Id", required = true) @Valid @RequestParam(value = "entityId", required = true) Integer entityId,@NotNull @ApiParam(value = "flag for comment or reply", required = true) @Valid @RequestParam(value = "flag", required = true) String flag) throws MvpShareException;

    
    @ApiOperation(value = "Delete Fan", nickname = "deleteFan", notes = "Delete Fan", response = SuccessResponse.class, tags= "MVP SHARE Module")
    @ApiOperationSupport(order = 57)
    @NeedToken
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = SuccessResponse.class))
    @GetMapping(value = "/share/deleteFan", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<SuccessResponse> deleteFan(@NotNull @ApiParam(value = "user Id", required = true) @Valid @RequestParam(value = "userId", required = true) Integer userId,@NotNull @ApiParam(value = "fan Id", required = true) @Valid @RequestParam(value = "fanId", required = true) Integer fanId) throws MvpShareException;
    
    @ApiOperation(value = "Find Friend", nickname = "findFriend", notes = "Find Friend", response = FriendListResponse.class, tags= "MVP SHARE Module")
    @ApiOperationSupport(order = 60)
    @NeedToken
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = FriendListResponse.class))
    @GetMapping(value = "/message/findFriend", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<FriendListResponse> findFriend(@ApiParam(value = "User Id", required = true) @Valid @RequestParam(value = "userId", required = true) Integer userId,@ApiParam(value = "searchContent", required = false) @Valid @RequestParam(value = "searchContent", required = false) String searchContent) throws MvpShareException;

    
    @ApiOperation(value = "Add View Amount", nickname = "addViewAmount", notes = "Add View Amount", response = SuccessResponse.class, tags= "MVP SHARE Module")
    @ApiOperationSupport(order = 63)
    @NeedToken
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = SuccessResponse.class))
    @GetMapping(value = "/share/addViewAmount", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<SuccessResponse> addViewAmount(@ApiParam(value = "share Id", required = true)@Valid @RequestParam(value = "shareId", required = true) Integer shareId) throws MvpShareException;

    
    @ApiOperation(value = "Find Friend By Mobile Contacts", nickname = "findFriendByMobileContacts", notes = "Find Friend By Mobile Contacts", response = FriendByMobileContactsResponse.class, tags= "MVP SHARE Module")
    @ApiOperationSupport(order = 66)
    @NeedToken
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = FriendByMobileContactsResponse.class))
    @PostMapping(value = "/message/findFriendByMobileContacts", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<FriendByMobileContactsResponse> findFriendByMobileContacts(@NotNull @ApiParam(value = "Phone Array", required = true) @Valid @RequestBody FriendByMobileContactsRequest findFriendByMobileContactsRequest);


    @ApiOperation(value = "GET Friend List", nickname = "getFriendList", notes = "GET Friend List", response = FriendListResponse.class, tags= "MVP SHARE Module")
    @ApiOperationSupport(order = 69)
    @NeedToken
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = FriendListResponse.class))
    @GetMapping(value = "/message/getFriendList", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<FriendListResponse> getFriendList(@NotNull @ApiParam(value = "User Id", required = true) @Valid @RequestParam(value = "userId", required = true) Integer userId,@ApiParam(value = "searchContent", required = false) @Valid @RequestParam(value = "searchContent", required = false) String searchContent);

    @ApiOperation(value = "Add Friend", nickname = "addFriend", notes = "Add Friend", response = FriendResponse.class, tags="MVP SHARE Module")
    @ApiOperationSupport(order = 52)
    @NeedToken
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = FriendResponse.class))
    @PostMapping(value = "/message/addFriend", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<FriendResponse> addFriend(@ApiParam(value = "Add Friend Request" ,required=true )  @Valid @RequestBody AddFriendRequest addFriendRequest) throws MvpShareException;
    
    @ApiOperation(value = "Is Friend", nickname = "isFriend", notes = "Is Friend", response = FriendListResponse.class, tags= "MVP SHARE Module")
    @ApiOperationSupport(order = 69)
    @NeedToken
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = FriendListResponse.class))
    @GetMapping(value = "/message/isFriend", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<IsFriendResponse> isFriend(@NotNull @ApiParam(value = "User Id", required = true) @Valid @RequestParam(value = "userId", required = true) Integer userId,@NotNull @ApiParam(value = "Fan Id", required = true) @Valid @RequestParam(value = "fanId", required = true) Integer fanId);
    
    @ApiOperation(value = "Invite Friend By Mobile Contacts", nickname = "inviteFriendByMobileContacts", notes = "Invite Friend By Mobile Contacts", response = InviteFriendByMobileContactsResponse.class, tags= "MVP SHARE Module")
    @ApiOperationSupport(order = 55)
    @NeedToken
    @ResponseConfig(@ApiResponse(code = 200, message = "OK", response = InviteFriendByMobileContactsResponse.class))
    @PostMapping(value = "/message/inviteFriendByMobileContacts", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<InviteFriendByMobileContactsResponse> inviteFriendByMobileContacts(@NotNull @ApiParam(value = "mobilePhone", required = true) @Valid @RequestBody InviteFriendByMobileContactsRequest inviteFriendByMobileContactsRequest,@ApiIgnore @RequestHeader("Authorization") String token) throws MvpShareException;

}