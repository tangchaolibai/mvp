/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.hsb.mvpmsshare.api;

import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.hsb.mvpmsshare.annotation.JwtIgnore;
import com.hsb.mvpmsshare.model.payload.ExceptionResponse;
import com.hsb.mvpmsshare.model.payload.request.AddFriendRequest;
import com.hsb.mvpmsshare.model.payload.request.AllFanListRequest;
import com.hsb.mvpmsshare.model.payload.request.CancelFanRequest;
import com.hsb.mvpmsshare.model.payload.request.CancelFollowRequest;
import com.hsb.mvpmsshare.model.payload.request.CommentRequest;
import com.hsb.mvpmsshare.model.payload.request.FollowRequest;
import com.hsb.mvpmsshare.model.payload.request.FollowingListByCreateTimeRequest;
import com.hsb.mvpmsshare.model.payload.request.FollowingUserByUserNameRequest;
import com.hsb.mvpmsshare.model.payload.request.FollowingUserListRequest;
import com.hsb.mvpmsshare.model.payload.request.RecentlyUpdatedUserRequest;
import com.hsb.mvpmsshare.model.payload.request.ShareRelationCountRequest;
import com.hsb.mvpmsshare.model.payload.request.SocialLikeRequest;
import com.hsb.mvpmsshare.model.payload.request.SocialMsgRequest;
import com.hsb.mvpmsshare.model.payload.request.SocialShareRequest;
import com.hsb.mvpmsshare.model.payload.response.AllFanListResponse;
import com.hsb.mvpmsshare.model.payload.response.AllFollowingUserListResponse;
import com.hsb.mvpmsshare.model.payload.response.CancelFanResponse;
import com.hsb.mvpmsshare.model.payload.response.CancelFollowResponse;
import com.hsb.mvpmsshare.model.payload.response.CommentListResponse;
import com.hsb.mvpmsshare.model.payload.response.CommentResponse;
import com.hsb.mvpmsshare.model.payload.response.DeleteCommentResponse;
import com.hsb.mvpmsshare.model.payload.response.DiscoverResponse;
import com.hsb.mvpmsshare.model.payload.response.DraftListResponse;
import com.hsb.mvpmsshare.model.payload.response.FilesPathListResponse;
import com.hsb.mvpmsshare.model.payload.response.FollowResponse;
import com.hsb.mvpmsshare.model.payload.response.FollowingListResponse;
import com.hsb.mvpmsshare.model.payload.response.FollowingUserByUserNameResponse;
import com.hsb.mvpmsshare.model.payload.response.FriendByMobileContactsResponse;
import com.hsb.mvpmsshare.model.payload.response.FriendListResponse;
import com.hsb.mvpmsshare.model.payload.response.FriendResponse;
import com.hsb.mvpmsshare.model.payload.response.InviteFriendByMobileContactsResponse;
import com.hsb.mvpmsshare.model.payload.response.RecentlyUpdatedUserResponse;
import com.hsb.mvpmsshare.model.payload.response.ShareListResponse;
import com.hsb.mvpmsshare.model.payload.response.ShareRelationCountResponse;
import com.hsb.mvpmsshare.model.payload.response.ShareResponse;
import com.hsb.mvpmsshare.model.payload.response.SuccessResponse;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@Api(tags = "Mvp Share Module", description = "The Mvp Share Module API")
public interface MvpShareModuleApi {

	@ApiOperation(value = "Upload Photos and Video", nickname = "uploadFiles", notes = "Upload Photos and Video")
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class) })
	@ApiImplicitParams({
        @ApiImplicitParam(paramType="header", name="Authorization", dataType="String", required = true, value="token", defaultValue="AAA.BBB.CCC"),
    })
	@RequestMapping(value = "/share/uploadFiles",
        consumes = { "multipart/*" },
        headers = { "content-type=multipart/form-data" }, 
        method = RequestMethod.POST)
	ResponseEntity<FilesPathListResponse> uploadFiles( @ApiParam(value = "The userId of User", required = true) @Valid @RequestParam(value = "userId", required = true) Integer userId,@ApiParam(value = "files" ,required=false )  @Valid @RequestBody MultipartFile[] multipartFiles) ;
	
	
    @ApiOperation(value = "Cancle Like Content", nickname = "cancelLike", notes = "Cancle Like Content")
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class) })
    @ApiImplicitParams({
        @ApiImplicitParam(paramType="header", name="Authorization", dataType="String", required = true, value="token", defaultValue="AAA.BBB.CCC"),
    })
    @RequestMapping(value = "/share/cancelLike",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<SuccessResponse> cancelLike(@ApiParam(value = "The likeId of like", required = true) @Valid @RequestParam(value = "likeId", required = true) Integer likeId);


    @ApiOperation(value = "Delete Content", nickname = "deleteContent", notes = "Delete Content")
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class) })
    @ApiImplicitParams({
        @ApiImplicitParam(paramType="header", name="Authorization", dataType="String", required = true, value="token", defaultValue="AAA.BBB.CCC"),
    })
    @RequestMapping(value = "/share/deleteContent",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<SuccessResponse> deleteContent(@ApiParam(value = "The shareId of content", required = true) @Valid @RequestParam(value = "shareId", required = true) Integer shareId);


    @ApiOperation(value = "Get Draft Content", nickname = "getDraftContent", notes = "Get Draft Content", response = DraftListResponse.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DraftListResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class) })
    @ApiImplicitParams({
        @ApiImplicitParam(paramType="header", name="Authorization", dataType="String", required = true, value="token", defaultValue="AAA.BBB.CCC"),
    })
    @RequestMapping(value = "/share/getDraftContent",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DraftListResponse> getDraftContent( @ApiParam(value = "The userId of User", required = true) @Valid @RequestParam(value = "userId", required = true) Integer userId);
    
    
    @ApiOperation(value = "Share Content to Internal Friends", nickname = "shareContent", notes = "Share Content to Internal Friends")
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class) })
    @ApiImplicitParams({
        @ApiImplicitParam(paramType="header", name="Authorization", dataType="String", required = true, value="token", defaultValue="AAA.BBB.CCC"),
    })
    @RequestMapping(value = "/share/shareContent",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<SuccessResponse> shareContent(@ApiParam(value = "massage notification" ,required=true )  @Valid @RequestBody List<SocialMsgRequest> socialMsg) ;
    
    
    @ApiOperation(value = "Upload Content", nickname = "postContent", notes = "Upload Content")
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class) })
    @ApiImplicitParams({
        @ApiImplicitParam(paramType="header", name="Authorization", dataType="String", required = true, value="token", defaultValue="AAA.BBB.CCC"),
    })
    @RequestMapping(value = "/share/postContent",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<SuccessResponse> postContent(@ApiParam(value = "SocialShare Request" ,required=true )  @Valid @RequestBody SocialShareRequest socialShare) ;
    
    
    @ApiOperation(value = "Like Content", nickname = "likeContent", notes = "Like Content")
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class) })
    @ApiImplicitParams({
        @ApiImplicitParam(paramType="header", name="Authorization", dataType="String", required = true, value="token", defaultValue="AAA.BBB.CCC"),
    })
    @RequestMapping(value = "/share/likeContent",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<SuccessResponse> likeContent(@ApiParam(value = "like of somebody's content" ,required=true )  @Valid @RequestBody List<SocialLikeRequest> socialLike) ;
    
    
    @ApiOperation(value = "Get Following List By CreateTime", nickname = "getFollowingListByCreateTime", notes = "Get Following List By CreateTime", response = FollowingListResponse.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = FollowingListResponse.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class) })
    @ApiImplicitParams({
        @ApiImplicitParam(paramType="header", name="Authorization", dataType="String", required = true, value="token", defaultValue="AAA.BBB.CCC"),
    })
    @RequestMapping(value = "/share/getFollowingListByCreateTime",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<FollowingListResponse> getFollowingListByCreateTime(@ApiParam(value = "Following List By CreateTime Request" ,required=true )  @Valid @RequestBody FollowingListByCreateTimeRequest followingListByCreateTimeRequest);


    @ApiOperation(value = "Get Share List By CreateTime", nickname = "getShareListByCreateTime", notes = "Get Share List By CreateTime", response = ShareListResponse.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ShareListResponse.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class) })
    @ApiImplicitParams({
        @ApiImplicitParam(paramType="header", name="Authorization", dataType="String", required = true, value="token", defaultValue="AAA.BBB.CCC"),
    })
    @RequestMapping(value = "/share/getShareListByCreateTime",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ShareListResponse> getShareListByCreateTime();
    
    
    @JwtIgnore
    @ApiOperation(value = "Get Share By CreateTime And Id", nickname = "getShareByCreateTimeAndId", notes = "Get Share List By CreateTime", response = ShareResponse.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ShareResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class)})
    @GetMapping(value = "/share", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<ShareResponse> getShareById(@Valid @RequestParam(value = "shareId", required = true) Integer shareId);


    @ApiOperation(value = "Get Share Relation Count", nickname = "getShareRelationCount", notes = "Get Share Relation Count", response = ShareRelationCountResponse.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ShareRelationCountResponse.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class) })
    @ApiImplicitParams({
        @ApiImplicitParam(paramType="header", name="Authorization", dataType="String", required = true, value="token", defaultValue="AAA.BBB.CCC"),
    })
    @RequestMapping(value = "/share/getShareRelationCount",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ShareRelationCountResponse> getShareRelationCount(@ApiParam(value = "Share RelationCount Request" ,required=true )  @Valid @RequestBody ShareRelationCountRequest shareRelationCountRequest);
    
    
    @ApiOperation(value = "Cancel Fan Of User", nickname = "cancelFan", notes = "Cancel Fan Of User")
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class) })
    @ApiImplicitParams({
        @ApiImplicitParam(paramType="header", name="Authorization", dataType="String", required = true, value="token", defaultValue="AAA.BBB.CCC"),
    })
    @RequestMapping(value = "/share/cancelFan",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CancelFanResponse> cancelFan(@ApiParam(value = "Cancel Fan Request" ,required=true )  @Valid @RequestBody CancelFanRequest cancelFanRequest);


    @ApiOperation(value = "Cancel Follow Other User", nickname = "cancelFollow", notes = "Cancel Follow Other User")
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class) })
    @ApiImplicitParams({
        @ApiImplicitParam(paramType="header", name="Authorization", dataType="String", required = true, value="token", defaultValue="AAA.BBB.CCC"),
    })
    @RequestMapping(value = "/share/cancelFollow",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CancelFollowResponse> cancelFollow(@ApiParam(value = "Cancel Follow Request" ,required=true )  @Valid @RequestBody CancelFollowRequest CancelFollowRequest);


    @ApiOperation(value = "Find Following User By UserName", nickname = "findFollowingByUserName", notes = "Find Following User By UserName", response = FollowingUserByUserNameResponse.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = FollowingUserByUserNameResponse.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class) })
    @ApiImplicitParams({
        @ApiImplicitParam(paramType="header", name="Authorization", dataType="String", required = true, value="token", defaultValue="AAA.BBB.CCC"),
    })
    @RequestMapping(value = "/share/findFollowingByUserName",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<FollowingUserByUserNameResponse> findFollowingByUserName(@ApiParam(value = "Find Following By UserName Request" ,required=true )  @Valid @RequestBody FollowingUserByUserNameRequest followingUserByUserNameRequest);


    @ApiOperation(value = "Follow Other User", nickname = "follow", notes = "Follow Other User")
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class) })
    @ApiImplicitParams({
        @ApiImplicitParam(paramType="header", name="Authorization", dataType="String", required = true, value="token", defaultValue="AAA.BBB.CCC"),
    })
    @RequestMapping(value = "/share/follow",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<FollowResponse> follow(@ApiParam(value = "Follow Request" ,required=true )  @Valid @RequestBody FollowRequest followRequest);


    @ApiOperation(value = "Get All Fan List", nickname = "getAllFanList", notes = "Get All Fan List", response = AllFanListResponse.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AllFanListResponse.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class) })
    @ApiImplicitParams({
        @ApiImplicitParam(paramType="header", name="Authorization", dataType="String", required = true, value="token", defaultValue="AAA.BBB.CCC"),
    })
    @RequestMapping(value = "/share/getAllFanList",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<AllFanListResponse> getAllFanList(@ApiParam(value = "All Fan List Request" ,required=true )  @Valid @RequestBody AllFanListRequest allFanListRequest);


    @ApiOperation(value = "Get All Following User List", nickname = "getAllFollowingUserList", notes = "Get All Following User List", response = AllFollowingUserListResponse.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AllFollowingUserListResponse.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class) })
    @ApiImplicitParams({
        @ApiImplicitParam(paramType="header", name="Authorization", dataType="String", required = true, value="token", defaultValue="AAA.BBB.CCC"),
    })
    @RequestMapping(value = "/share/getAllFollowingUserList",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<AllFollowingUserListResponse> getAllFollowingUserList(@ApiParam(value = "All Following User List" ,required=true )  @Valid @RequestBody FollowingUserListRequest followingUserListRequest);
     


    @ApiOperation(value = "Get Recently Updated User", nickname = "getRecentlyUpdatedUser", notes = "Get Recently Updated User", response = RecentlyUpdatedUserResponse.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RecentlyUpdatedUserResponse.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class) })
    @ApiImplicitParams({
        @ApiImplicitParam(paramType="header", name="Authorization", dataType="String", required = true, value="token", defaultValue="AAA.BBB.CCC"),
    })
    @RequestMapping(value = "/share/getRecentlyUpdatedUser",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<RecentlyUpdatedUserResponse> getRecentlyUpdatedUser(@ApiParam(value = "Recently Updated User" ,required=true )  @Valid @RequestBody RecentlyUpdatedUserRequest recentlyUpdatedUserRequest);
    
    
    @JwtIgnore
    @ApiOperation(value = "", nickname = "", notes = "r")
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResponseEntity.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class) })
    @ApiImplicitParams({
        @ApiImplicitParam(paramType="header", name="Authorization", dataType="String", required = true, value="token", defaultValue="AAA.BBB.CCC"),
    })
    @RequestMapping(value = "/share/insertData",
            produces = { "application/json" }, 
            method = RequestMethod.GET)
    ResponseEntity<Void> insertData();
    
    
    @ApiOperation(value = "Get Discover", nickname = "getDiscover", notes = "Get Discover", response = DiscoverResponse.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DiscoverResponse.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class) })
    @ApiImplicitParams({
        @ApiImplicitParam(paramType="header", name="Authorization", dataType="String", required = true, value="token", defaultValue="AAA.BBB.CCC"),
    })
    @RequestMapping(value = "/share/discover",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DiscoverResponse> getDiscover(@NotNull @ApiParam(value = "Share Id", required = true) @Valid @RequestParam(value = "shareId", required = true) Integer shareId,@NotNull @ApiParam(value = "Share Id", required = true) @Valid @RequestParam(value = "fromUserId", required = true) Integer fromUserId);
    
    
    @ApiOperation(value = "Get Commemt List", nickname = "getCommentList", notes = "Get Commemt list", response = CommentListResponse.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CommentListResponse.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class) })
    @ApiImplicitParams({
        @ApiImplicitParam(paramType="header", name="Authorization", dataType="String", required = true, value="token", defaultValue="AAA.BBB.CCC"),
    })
    @RequestMapping(value = "/share/commentList",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CommentListResponse> getCommentList(@NotNull @ApiParam(value = "Share Id", required = true) @Valid @RequestParam(value = "shareId", required = true) Integer shareId);

    
    @ApiOperation(value = "Add Comment", nickname = "addComment", notes = "Add Comment", response = CommentResponse.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CommentResponse.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class) })
    @ApiImplicitParams({
        @ApiImplicitParam(paramType="header", name="Authorization", dataType="String", required = true, value="token", defaultValue="AAA.BBB.CCC"),
    })
    @RequestMapping(value = "/share/addComment",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CommentResponse> addComment(@ApiParam(value = "Comment Request" ,required=true )  @Valid @RequestBody CommentRequest commentRequest);

    
    @ApiOperation(value = "Delete Commemt", nickname = "deleteCommentList", notes = "Delete Commemt", response = DeleteCommentResponse.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DeleteCommentResponse.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class) })
    @ApiImplicitParams({
        @ApiImplicitParam(paramType="header", name="Authorization", dataType="String", required = true, value="token", defaultValue="AAA.BBB.CCC"),
    })
    @RequestMapping(value = "/share/deleteComment",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<DeleteCommentResponse> deleteCommentList(@NotNull @ApiParam(value = "Share Id", required = true) @Valid @RequestParam(value = "shareId", required = true) Integer shareId,@NotNull @ApiParam(value = "Comment Entity Id", required = true) @Valid @RequestParam(value = "entityId", required = true) Integer entityId,@NotNull @ApiParam(value = "flag for comment or reply", required = true) @Valid @RequestParam(value = "flag", required = true) String flag);

    
    @ApiOperation(value = "Find Friend", nickname = "findFriend", notes = "Find Friend", response = FriendResponse.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = FriendResponse.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class) })
    @ApiImplicitParams({
        @ApiImplicitParam(paramType="header", name="Authorization", dataType="String", required = true, value="token", defaultValue="AAA.BBB.CCC"),
    })
    @RequestMapping(value = "/message/findFriend",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<FriendListResponse> findFriend(@ApiParam(value = "User Id", required = true) @Valid @RequestParam(value = "userId", required = true) Integer userId,@NotNull @ApiParam(value = "Phone Array", required = true) @Valid @RequestParam(value = "phoneArray", required = true) String...phoneArray);


    @ApiOperation(value = "Find Friend By Mobile Contacts", nickname = "findFriendByMobileContacts", notes = "Find Friend By Mobile Contacts", response = FriendByMobileContactsResponse.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = FriendByMobileContactsResponse.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class) })
    @ApiImplicitParams({
        @ApiImplicitParam(paramType="header", name="Authorization", dataType="String", required = true, value="token", defaultValue="AAA.BBB.CCC"),
    })
    @RequestMapping(value = "/message/findFriendByMobileContacts",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<FriendByMobileContactsResponse> findFriendByMobileContacts(@NotNull @ApiParam(value = "User Id", required = true) @Valid @RequestParam(value = "userId", required = true) List<String> userId,@NotNull @ApiParam(value = "Phone Array", required = true) @Valid @RequestParam(value = "phoneArray", required = true) String...phoneArray);


    @ApiOperation(value = "GET Friend List", nickname = "getFriendList", notes = "GET Friend List", response = FriendListResponse.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = FriendListResponse.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class) })
    @ApiImplicitParams({
        @ApiImplicitParam(paramType="header", name="Authorization", dataType="String", required = true, value="token", defaultValue="AAA.BBB.CCC"),
    })
    @RequestMapping(value = "/message/getFriendList",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<FriendListResponse> getFriendList(@NotNull @ApiParam(value = "User Id", required = true) @Valid @RequestParam(value = "userId", required = true) Integer userId);

    
    @ApiOperation(value = "Add Friend", nickname = "addFriend", notes = "Add Friend", response = FriendResponse.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = FriendResponse.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class) })
    @ApiImplicitParams({
        @ApiImplicitParam(paramType="header", name="Authorization", dataType="String", required = true, value="token", defaultValue="AAA.BBB.CCC"),
    })
    @RequestMapping(value = "/message/addFriend",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<FriendResponse> addFriend(@ApiParam(value = "Add Friend Request" ,required=true )  @Valid @RequestBody AddFriendRequest addFriendRequest);
    
    
    @ApiOperation(value = "Invite Friend By Mobile Contacts", nickname = "inviteFriendByMobileContacts", notes = "Invite Friend By Mobile Contacts", response = InviteFriendByMobileContactsResponse.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = InviteFriendByMobileContactsResponse.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExceptionResponse.class) })
    @ApiImplicitParams({
        @ApiImplicitParam(paramType="header", name="Authorization", dataType="String", required = true, value="token", defaultValue="AAA.BBB.CCC"),
    })
    @RequestMapping(value = "/message/inviteFriendByMobileContacts",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<InviteFriendByMobileContactsResponse> inviteFriendByMobileContacts(@NotNull @ApiParam(value = "phoneArray", required = true) @Valid @RequestParam(value = "phoneArray", required = true) String...phoneArray);

}
